@model IEnumerable<ConferenceProject.Models.ConferenceItem>
@using ConferenceProject.ViewModels.Statistics;

@{
    ViewData["Title"] = "Statistics";
}

<ptitle>Statistics</ptitle>
<div style="padding-bottom:2em"></div>
<stitle>registration rate graph</stitle>
<div>
    <meta charset="utf-8">
    <style>
        svg {
            font: 10px sans-serif;
        }
      
        path.line {
            fill: none;
            stroke: #666;
            stroke-width: 1.5px;
        }

        path.area {
            fill: #e7e7e7;
        }

        .axis {
            shape-rendering: crispEdges;
        }

        .x.axis line {
            stroke: #fff;
        }

        .x.axis .minor {
            stroke-opacity: .5;
        }

        .x.axis path {
            display: none;
        }

        .y.axis line,
        .y.axis path {
            fill: none;
            stroke: #000;
        }
    </style>

    <script src="//d3js.org/d3.v3.min.js"></script>
    <script>

        var margin = { top: 40, right: 40, bottom: 40, left: 40 },
            width = 960 - margin.left - margin.right,
            height = 500 - margin.top - margin.bottom;

        var format = d3.time.format("%m/%d/%Y");

        var x = d3.time.scale()
            .range([0, width]);

        var y = d3.scale.linear()
            .range([height, 0]);

        var xAxis = d3.svg.axis()
            .scale(x)
            .tickSize(-height);

        var yAxis = d3.svg.axis()
            .scale(y)
            .ticks(4)
            .orient("right");

        var area = d3.svg.area()
            .interpolate("monotone")
            .x(function (d) { return x(d.date); })
            .y0(height)
            .y1(function (d) { return y(d.count); });

        var line = d3.svg.line()
            .interpolate("monotone")
            .x(function (d) { return x(d.date); })
            .y(function (d) { return y(d.count); });

        var svg = d3.select("body").append("svg")
            .attr("width", width + margin.left + margin.right)
            .attr("height", height + margin.top + margin.bottom)
          .append("g")
            .attr("transform", "translate(" + margin.left + "," + margin.top + ")");

        svg.append("clipPath")
            .attr("id", "clip")
          .append("rect")
            .attr("width", width)
            .attr("height", height);

        @{
    List<AttendGraph> arr = (List<AttendGraph>)ViewData["data"];
            }
        var data = [
            @foreach (var item in arr)
            {

                         <text>{
                'date': '@item.date',
                'count': '@item.count',
                'item': '@item.item'
            }, </text>
            }
        ];

        var i = 0;
        for (i; i < data.length; i++) {
            data[i].date = format.parse(data[i].date);
            data[i].count = +(data[i].count);
        }


        // Compute the minimum and maximum date, and the maximum count.
        x.domain([data[0].date, data[data.length - 1].date]);
        y.domain([0, d3.max(data, function (d) { return d.count; })]).nice();

        svg
            .datum(data)
          .on("click", click);

        svg.append("path")
          .attr("class", "area")
          .attr("clip-path", "url(#clip)")
          .attr("d", area);

        svg.append("g")
          .attr("class", "x axis")
          .attr("transform", "translate(0," + height + ")")
          .call(xAxis);

        svg.append("g")
          .attr("class", "y axis")
          .attr("transform", "translate(" + width + ",0)")
          .call(yAxis);

        svg.append("path")
          .attr("class", "line")
          .attr("clip-path", "url(#clip)")
          .attr("d", line);

        svg.append("text")
          .attr("x", width - 6)
          .attr("y", height - 6)
          .style("text-anchor", "end")
          .text(data[0].symbol);

        // On click, update the x-axis.
        function click() {
            var n = data.length - 1,
                i = Math.floor(Math.random() * n / 2),
                j = i + Math.floor(Math.random() * n / 2) + 1;
            x.domain([data[i].date, data[j].date]);
            var t = svg.transition().duration(750);
            t.select(".x.axis").call(xAxis);
            t.select(".area").attr("d", area);
            t.select(".line").attr("d", line);
        }


        // Parse dates and numbers. We assume values are sorted by date.
        // Also filter to one symbol; the S&P 500.
        function type(d) {
            d.date = parse(d.date);
            d.count = +d.count;
            //if (d.symbol === "S&P 500")
            return d;
        }

    </script>
</div>


<div>
    <meta charset="utf-8">
    <style>
        text {
            font: 10px sans-serif;
        }
    </style>

    <script src="//d3js.org/d3.v3.min.js"></script>
    <!--<stitle>popularity graph</stitle>-->
    <script>

        var diameter = 960,
            format = d3.format(",d"),
            color = d3.scale.category20();

        var bubble = d3.layout.pack()
            .sort(null)
            .size([diameter, diameter])
            .padding(1.5);

        

        
        var svg = d3.select("body").append("svg")
            .attr("width", diameter)
            .attr("height", diameter)
            .attr("class", "bubble");


        var node = svg.selectAll(".node")
            .data(bubble.nodes(classes(data))
            .filter(function (d) { return !d.children; }))
          .enter().append("g")
            .attr("class", "node")
            .attr("transform", function (d) { return "translate(" + d.x + "," + d.y + ")"; });

        node.append("title")
            .text(function (d) { return d.className + ": " + format(d.value); });

        node.append("circle")
            .attr("r", function (d) { return d.r; })
            .style("fill", function (d) { return color(d.packageName); });

        node.append("text")
            .attr("dy", ".3em")
            .style("text-anchor", "middle")
            .text(function (d) { return (d.className + ' (' + d.value + ')').substring(0, d.r / 3); });

        function classes(root) {

            @{
           List<PopularityGraph> arr2 = (List<PopularityGraph>)ViewData["data2"];
       }


            var classes = [
                     @foreach (var item in arr2)
    {

        <text>{
                         'className': '@item.title',
                         'value': '@item.count',
                         'packageName': '@item.lecturer'
                     }, </text>
    }

            ]

            return { children: classes };
        }

        d3.select(self.frameElement).style("height", diameter + "px");

    </script>
    <stitle>popularity graph</stitle>
</div>